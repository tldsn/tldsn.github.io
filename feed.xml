<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TLDSN</title>
    <description>^^</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 Apr 2020 00:24:26 +0800</pubDate>
    <lastBuildDate>Fri, 24 Apr 2020 00:24:26 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>网站备忘</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#go&quot; id=&quot;markdown-toc-go&quot;&gt;go&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#爬虫&quot; id=&quot;markdown-toc-爬虫&quot;&gt;爬虫&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#vscode配置&quot; id=&quot;markdown-toc-vscode配置&quot;&gt;VScode配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#grpc实践&quot; id=&quot;markdown-toc-grpc实践&quot;&gt;grpc实践&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#文档&quot; id=&quot;markdown-toc-文档&quot;&gt;文档&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;go&quot;&gt;go&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;爬虫&quot;&gt;爬虫&lt;/h4&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/majianguo/p/8146110.html&quot;&gt;Golang 网络爬虫框架gocolly/colly&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;vscode配置&quot;&gt;VScode配置&lt;/h4&gt;

    &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/GeMarK/article/details/90269561&quot;&gt;vscode关于go语言的settings.json文件内容&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;grpc实践&quot;&gt;grpc实践&lt;/h4&gt;

    &lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000008106582&quot;&gt;grpc&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;文档&quot;&gt;文档&lt;/h4&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/03/css_cookbook.html&quot;&gt;css&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2012/06/sass.html&quot;&gt;scss&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot;&gt;git&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html&quot;&gt;git-flow&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://help.github.com/cn/github/searching-for-information-on-github/searching-code&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://jekyllcn.com/docs/quickstart/&quot;&gt;jekyll&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://liquid.bootcss.com/basics/types/&quot;&gt;liquid&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://wyagd001.github.io/zh-cn/docs/AutoHotkey.htm&quot;&gt;AutoHotKey&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://books.studygolang.com/gobyexample/&quot;&gt;go by Example&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://tour.studygolang.com/list&quot;&gt;go指南&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.fontawesome.com.cn/&quot;&gt;fontawesome&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/%E7%BD%91%E7%AB%99%E5%A4%87%E5%BF%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/%E7%BD%91%E7%AB%99%E5%A4%87%E5%BF%98/</guid>
        
        <category>网站备忘</category>
        
        
        <category>资源</category>
        
      </item>
    
      <item>
        <title>stackoverflow搜索</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#base&quot; id=&quot;markdown-toc-base&quot;&gt;base&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#评分&quot; id=&quot;markdown-toc-评分&quot;&gt;评分&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#时间&quot; id=&quot;markdown-toc-时间&quot;&gt;时间&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#状态&quot; id=&quot;markdown-toc-状态&quot;&gt;状态&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;base&quot;&gt;base&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[n]        在标签下匹配&lt;/li&gt;
  &lt;li&gt;“n”        精确匹配&lt;/li&gt;
  &lt;li&gt;title: n&lt;/li&gt;
  &lt;li&gt;body: n&lt;/li&gt;
  &lt;li&gt;user:me n        搜索自己&lt;/li&gt;
  &lt;li&gt;-n        排除&lt;/li&gt;
  &lt;li&gt;*        通配符&lt;/li&gt;
  &lt;li&gt;or        或&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;评分&quot;&gt;评分&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;score:-1或score:-1..        都将返回得分均大于或等于-1的帖子&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;时间&quot;&gt;时间&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;created:        指定创建帖子的时间&lt;/li&gt;
  &lt;li&gt;lastactive:        在指定时间段内处于活动状态的帖子&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;created:2012-04..2012-05       在2012年4月1日至2012年5月31日之间创建的搜索帖子。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;状态&quot;&gt;状态&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;intags:mine       仅返回出现在您标记为收藏的标签中的帖子。&lt;/li&gt;
  &lt;li&gt;isaccepted:yes / true / 1        仅返回已标记为“已接受”的答案；no / false / 0仅返回未标记为接受的答案。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/help/searching&quot;&gt;https://stackoverflow.com/help/searching&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/stackoverflow%E6%90%9C%E7%B4%A2/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/stackoverflow%E6%90%9C%E7%B4%A2/</guid>
        
        <category>stackoverflow</category>
        
        <category>搜索技巧</category>
        
        
        <category>搜索技巧</category>
        
      </item>
    
      <item>
        <title>百度脑图</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#百度脑图&quot; id=&quot;markdown-toc-百度脑图&quot;&gt;百度脑图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;百度脑图&quot;&gt;百度脑图&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;生成节点快捷键&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;操作&lt;/th&gt;
          &lt;th style=&quot;text-align: right&quot;&gt;快捷键&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;生成子节点&lt;/td&gt;
          &lt;td style=&quot;text-align: right&quot;&gt;Tab键&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;生成父节点&lt;/td&gt;
          &lt;td style=&quot;text-align: right&quot;&gt;Shift+Tab键&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;生成兄弟节点&lt;/td&gt;
          &lt;td style=&quot;text-align: right&quot;&gt;Enter键&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/%E7%99%BE%E5%BA%A6%E8%84%91%E5%9B%BE/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/%E7%99%BE%E5%BA%A6%E8%84%91%E5%9B%BE/</guid>
        
        <category>流程图</category>
        
        <category>百度脑图</category>
        
        
        <category>工具</category>
        
      </item>
    
      <item>
        <title>git</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#基本命令&quot; id=&quot;markdown-toc-基本命令&quot;&gt;基本命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装git&lt;/p&gt;

&lt;p&gt;配置环境变量&lt;/p&gt;

&lt;h3 id=&quot;基本命令&quot;&gt;基本命令&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;让Git显示颜色&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ```
  git config --global color.ui true
  ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置别名&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ```
  git config --global alias.lg &quot;log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit&quot;
  ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建新仓库&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看状态&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提交历史&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git log --pretty=oneline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;命令历史&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看工作区和版本库里面最新版本的区别&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git diff HEAD -- readme.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &amp;lt;filename&amp;gt;

fit commit -m &quot;提交信息&quot;

git config --global user.email &quot;you@example.com&quot;
git config --global user.name &quot;Your Name&quot;

git remote add origin &amp;lt;server&amp;gt;连接远程

git push origin master推送

git push -u origin master
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase

git rebase  是将上游更改合并进本地仓库的通常方法，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」
* rebase操作可以把本地未push的分叉提交历史整理成直线；
* rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

在你工作流中使用 rebase 最好的用法之一就是清理本地正在开发的分支。隔一段时间执行一次交互式 rebase，你可以保证你 feature 分支中的每一个提交都是专注和有意义的。你在写代码时不用担心造成孤立的提交——因为你后面一定能修复。
对最新的 3 次提交进行了交互式 rebase：
git checkout feature
git rebase -i HEAD~3

如果你想用这个方法重写整个 feature 分支，git merge-base 命令非常方便地找出 feature 分支开始分叉的基。下面这段命令返回基提交的 ID，你可以接下来将它传给 git rebase：
git merge-base feature master

git pull 命令会执行一次merge，但你可以传入--rebase 来强制它通过rebase来整合远程分支。

如果你将 Pull Request 作为你代码审查过程中的一环，你需要避免在创建 Pull Request 之后使用 git rebase。

git rebase -i    交互式变基
* pick：正常选中
* reword：选中，并且修改提交信息；
* edit：选中，rebase时会暂停，允许你修改这个commit（参考这里）
* squash：选中，会将当前commit与上一个commit合并
* fixup：与squash相同，但不会保存当前commit的提交信息
* exec：执行其他shell命令

git rebase -i --autosquash 
自动组织这些修正提交和关联的普通提交的合并
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit --amend --no-edit
合并缓存的修改和上一次的提交，用新的快照替换上一个提交。缓存区没有文件时运行这个命令可以用来编辑上次提交的提交信息，而不会更改快照。

git commit --fixup &amp;lt;commit&amp;gt;
自动将提交标记为先前提交的修复
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;撤销（revert）和重设（reset）对比

git revert  撤销一个已经提交的快照，保留项目历史，生成新的提交

* 撤销和重设相比有两个重要的优点。首先，它不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。
* 其次，git revert 可以针对历史中任何一个提交，而 git reset 只能从当前提交向前回溯。比如，你想用 git reset 重设一个旧的提交，你不得不移除那个提交后的所有提交，再移除那个提交，然后重新提交后面的所有提交。不用说，这并不是一个优雅的回滚方案。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;版本回退    checkout    reset

git reset  命令用于撤销提交或被缓存的快照。
        --hard  取消缓存并改变工作目录

git checkout  检出文件、提交、分支

git checkout -- readme.txt
意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

git reset &amp;lt;file&amp;gt;从缓存区移除特定文件，但不改变工作目录。
git reset HEAD &amp;lt;file&amp;gt;可以把暂存区的修改撤销掉（unstage），重新放回工作区
git reset --hard重设缓冲区和工作目录

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD &amp;lt;file&amp;gt;，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，git reset，不过前提是没有推送到远程库。

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

git clean  命令将未跟踪的文件从你的工作目录中移除
        git clean 命令经常和 git reset --hard 一起使用。记住，reset 只影响被跟踪的文件，所以还需要一个单独的命令来清理未被跟踪的文件。这个两个命令相结合，你就可以将工作目录回到之前特定提交时的状态。
    -n  演习
    -f  强制删除
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分支
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch &amp;lt;name&amp;gt;
切换分支：git checkout &amp;lt;name&amp;gt;或者git switch &amp;lt;name&amp;gt;
创建+切换分支：git checkout -b &amp;lt;name&amp;gt;或者git switch -c &amp;lt;name&amp;gt;
合并某分支到当前分支：git merge &amp;lt;name&amp;gt;
删除分支：git branch -d &amp;lt;name&amp;gt;

    
git merge --no-ff -m &quot;merge with no-ff&quot; dev  合并分支禁用Fast forward   
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D &amp;lt;name&amp;gt;强行删除。

git checkout -b dev origin/dev  创建远程origin的dev分支到本地    

多人协作的工作模式通常是这样：
1. 首先，可以试图用git push origin &amp;lt;branch-name&amp;gt;推送自己的修改；
2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3. 如果合并有冲突，则解决冲突，并在本地提交；
4. 没有冲突或者解决掉冲突后，再用git push origin &amp;lt;branch-name&amp;gt;推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &amp;lt;branch-name&amp;gt; origin/&amp;lt;branch-name&amp;gt;


git remote -v    查看远程仓库
git remote rm origin    删除已有的GitHub远程库
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;打Tag
git tag &amp;lt;tagname&amp;gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag v0.9 f52c633
git tag -a &amp;lt;tagname&amp;gt; -m &quot;blablabla...&quot;可以指定标签信息；
git tag可以查看所有标签
git show &amp;lt;tagname&amp;gt;可以看到说明文字

git push origin &amp;lt;tagname&amp;gt;可以推送一个本地标签；
git push origin --tags可以推送全部未推送过的本地标签；
git tag -d &amp;lt;tagname&amp;gt;可以删除一个本地标签；
git push origin :refs/tags/&amp;lt;tagname&amp;gt;可以删除一个远程标签。
如果标签已经推送到远程，要先从本地删除,然后，从远程删除
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;暂存        
git stash    
git stash list    查看
git stash apply stash@{0}    恢复
git stash drop    删除
git stash pop    恢复并删除
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bug
cherry-pick命令    让我们能复制一个特定的提交到当前分支
git cherry-pick 4c805e2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;概念
工作目录、缓冲区、提交历史

HEAD表示当前版本，也就是最新的提交,上一个版本就是HEAD^，上上一个版本就是HEAD^^

HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gitignore    
https://github.com/github/gitignore
忽略文件的原则是：
1忽略操作系统自动生成的文件，比如缩略图等；
2. 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
3. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
检验.gitignore的标准是git status命令是不是说working directory clean
git add -f App.class    强制添加
git check-ignore -v App.class    检查规则
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fow  
分支管理策略

Git FLow模型定义了五种标准的分支
主要分支，包括master分支和develop分支。辅助分支，包括feature分支，hotfix分支和release分支

命令
git fow init  初始化
git flow feature  查看feature分支
git flow feature start feature_branch_name  创建feature分支
git flow feature finish feature_branch_name  自动合并feature分支到develop分支和master分支，并删除feature分支
git flow feature publish feature_branch_name  push一个feature分支到远程仓库
git flow feature pull origin feature_branch_name  pull一个feature分支到远程仓库

fit flow备忘清单  https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;工作流
git fow

fork  

feature

在master上修改代码，要像hotfix一样，创建分支然后分别合并，不然的话，master分支和dev分支的进度就不同步了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/git/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/git/</guid>
        
        <category>git</category>
        
        <category>命令</category>
        
        
        <category>工具</category>
        
      </item>
    
      <item>
        <title>anki筛选语法</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#暂停和搁置&quot; id=&quot;markdown-toc-暂停和搁置&quot;&gt;暂停和搁置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#卡片性质&quot; id=&quot;markdown-toc-卡片性质&quot;&gt;卡片性质&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#标签&quot; id=&quot;markdown-toc-标签&quot;&gt;标签&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#卡片状态&quot; id=&quot;markdown-toc-卡片状态&quot;&gt;卡片状态&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最近回答的卡片&quot; id=&quot;markdown-toc-最近回答的卡片&quot;&gt;最近回答的卡片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;anki筛选语法&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;暂停和搁置&quot;&gt;暂停和搁置&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;is:suspended
暂停卡&lt;/li&gt;
  &lt;li&gt;is:buried
搁置卡&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;卡片性质&quot;&gt;卡片性质&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;prop:ivl&amp;gt;=10
匹配间隔大于10天的卡片&lt;/li&gt;
  &lt;li&gt;prop:due=1
匹配明天到期的卡片&lt;/li&gt;
  &lt;li&gt;prop:due=-1
匹配昨天到期但尚未复习到的滞留卡片&lt;/li&gt;
  &lt;li&gt;prop:due&amp;gt;-1 prop:due&amp;lt;1
匹配昨天到期、今天到期和明天将要到期的卡片&lt;/li&gt;
  &lt;li&gt;prop:reps&amp;lt;10
匹配回答次数少于10次的卡片&lt;/li&gt;
  &lt;li&gt;prop:lapses&amp;gt;3
匹配失误再次学习超过3次的卡片&lt;/li&gt;
  &lt;li&gt;prop:ease!=2.5
匹配难度大于或小于初始默认值的卡片&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;标签&quot;&gt;标签&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;tag:animal
匹配带有“animal”标签的笔记&lt;/li&gt;
  &lt;li&gt;tag:none
匹配没有标签的笔记&lt;/li&gt;
  &lt;li&gt;tag:ani*
匹配标签以“ani”开头的笔记&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;卡片状态&quot;&gt;卡片状态&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;is:due
匹配已到期的的复习卡片和学习中卡片&lt;/li&gt;
  &lt;li&gt;is:new
匹配新卡片&lt;/li&gt;
  &lt;li&gt;is:learn
匹配学习中卡片&lt;/li&gt;
  &lt;li&gt;is:review
匹配待学习的复习卡片（包括到期的和未到期的）和失误的卡片&lt;/li&gt;
  &lt;li&gt;is:suspended
匹配手动暂停的卡片&lt;/li&gt;
  &lt;li&gt;is:buried
匹配已搁置的卡片（包括自动的和手动的）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;失误的卡片可以归入几个类别，下面提供一些可能比较有用的搜索办法，以便准确定位搜索结果：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is:learn is:review
匹配失误的等待再次学习的卡片&lt;/li&gt;
  &lt;li&gt;-is:learn is:review
只匹配正常的复习卡片，不包括失误的卡片&lt;/li&gt;
  &lt;li&gt;is:learn -is:review
只匹配第一次学习的卡片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;注意到期（is:due）只匹配复习卡片和间隔在1天及以上的学习中卡片，不匹配间隔很短（如10分钟）的学习中卡片。&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;最近回答的卡片&quot;&gt;最近回答的卡片&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;rated:1
匹配今天回答的卡片&lt;/li&gt;
  &lt;li&gt;rated:1:2
匹配今天回答Hard（2）的卡片&lt;/li&gt;
  &lt;li&gt;rated:7:1
匹配过去7天回答Again（1）的卡片&lt;/li&gt;
  &lt;li&gt;rated:31:4
匹配过去1月回答Easy（4）的卡片&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/anki/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/anki/</guid>
        
        <category>anki</category>
        
        <category>搜索技巧</category>
        
        
        <category>搜索技巧</category>
        
      </item>
    
      <item>
        <title>系统安装与备份</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#windows系统&quot; id=&quot;markdown-toc-windows系统&quot;&gt;windows系统&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ubuntu&quot; id=&quot;markdown-toc-ubuntu&quot;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#uefi--gpt-安装&quot; id=&quot;markdown-toc-uefi--gpt-安装&quot;&gt;UEFI + GPT 安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dism&quot; id=&quot;markdown-toc-dism&quot;&gt;DISM++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;windows系统&quot;&gt;windows系统&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;U盘&lt;/li&gt;
  &lt;li&gt;Rufus&lt;/li&gt;
  &lt;li&gt;系统镜像MSDN I Tell You&lt;/li&gt;
  &lt;li&gt;安装密钥&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;把待安装系统的分区设置为用于Ext4文件系统，并设置挂载点为根目录/&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;uefi--gpt-安装&quot;&gt;UEFI + GPT 安装&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么要用 UEFI 引导方案？
UEFI 引导是一种新的系统引导方式，被看作是传统 BIOS 引导的继承者。跟 BIOS 相比，UEFI 直接从预启动的操作环境加载到操作系统上从而节省开机时间。所以说，用 UEFI 引导方式可有效提升开机速度。
为什么要用 GPT 分区方案？
传统的 MBR 分区表只能支持 2.1T 以下的硬盘容量，并且最多创建 4 个主分区，也就是最多同时安装 4 个操作系统。GPT 则没有分区的限制，但是 GPT 必须要 UEFI 引导。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;进入BIOS，查看是否支持UEFI BOOT，并设置为Enabled&lt;/li&gt;
  &lt;li&gt;进入winPE，删除硬盘所有分区，转换分区类型为GUID&lt;/li&gt;
  &lt;li&gt;划分硬盘分区：建立新分区，建立主分区&lt;/li&gt;
  &lt;li&gt;安装系统&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;dism&quot;&gt;DISM++&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;系统镜像&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/a33d0e202fc1&quot;&gt;https://www.jianshu.com/p/a33d0e202fc1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%A4%87%E4%BB%BD/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%A4%87%E4%BB%BD/</guid>
        
        <category>装系统</category>
        
        
        <category>环境</category>
        
      </item>
    
      <item>
        <title>一些工具</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#githup&quot; id=&quot;markdown-toc-githup&quot;&gt;githup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#火狐扩展&quot; id=&quot;markdown-toc-火狐扩展&quot;&gt;火狐扩展&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tampermonkey&quot; id=&quot;markdown-toc-tampermonkey&quot;&gt;tampermonkey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;githup&quot;&gt;githup&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Octotree        文件树形结构展示&lt;/li&gt;
  &lt;li&gt;OctoLinker      代码跳转&lt;/li&gt;
  &lt;li&gt;Octohint        变量名高亮&lt;/li&gt;
  &lt;li&gt;Sourcegraph&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;火狐扩展&quot;&gt;火狐扩展&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Infinity新标签页&lt;/li&gt;
  &lt;li&gt;印象笔记剪切&lt;/li&gt;
  &lt;li&gt;anki在线词典助手&lt;/li&gt;
  &lt;li&gt;Translator Extension(极简翻译)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tampermonkey&quot;&gt;tampermonkey&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ac-baidu&lt;/li&gt;
  &lt;li&gt;护眼脚本&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7/</guid>
        
        <category>工具</category>
        
        <category>效率</category>
        
        
        <category>工具</category>
        
      </item>
    
      <item>
        <title>一些代理</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#git&quot; id=&quot;markdown-toc-git&quot;&gt;git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#npm&quot; id=&quot;markdown-toc-npm&quot;&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git&quot;&gt;git&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;设置代理
git config --global http.proxy socks5://127.0.0.1:1080
取消代理
git config --global --unset http.proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;npm&quot;&gt;npm&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;淘宝镜像
npm config set registry https://registry.npm.taobao.org

验证
npm config get registry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%90%86/</guid>
        
        <category>代理</category>
        
        <category>git</category>
        
        <category>npm</category>
        
        
        <category>环境</category>
        
      </item>
    
      <item>
        <title>ERROR</title>
        <description>
&lt;p&gt;ERROR//Git错误:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ServicePointManager 不支持具有 socks5h 方案的代理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原因：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;虽然配置了socks5h代理，但是git remote add origin配置的是https的项目地址，
所以代理无法使用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解决：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;git remote rm origin删除
重新配置为SSH的项目地址&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/Exception/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/Exception/</guid>
        
        <category>Exception</category>
        
        <category>git</category>
        
        
        <category>Exception</category>
        
      </item>
    
      <item>
        <title>为什么GitHub需要SSH Key呢？</title>
        <description>&lt;ul id=&quot;markdown-toc&quot; role=&quot;doc-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么github需要ssh-key呢&quot; id=&quot;markdown-toc-为什么github需要ssh-key呢&quot;&gt;为什么GitHub需要SSH Key呢&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#特点&quot; id=&quot;markdown-toc-特点&quot;&gt;特点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;为什么github需要ssh-key呢&quot;&gt;为什么GitHub需要SSH Key呢&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，&lt;br /&gt;
而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;特点&quot;&gt;特点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ssh方式单独使用非对称的秘钥进行认证和加密传输，和账号密码分离开来，不需要账号也可以访问repo。&lt;/li&gt;
  &lt;li&gt;生成和管理秘钥有点繁琐，需要管理员添加成员的public key。不能进行匿名访问，ssh不利于对权限进行细分，用户必须具有通过SSH协议访问你主机的权限，才能进行下一步操作，比较适合内部项目&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/21/github-sshkey/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/github-sshkey/</guid>
        
        <category>github</category>
        
        <category>SSH</category>
        
        
        <category>问题</category>
        
      </item>
    
  </channel>
</rss>
